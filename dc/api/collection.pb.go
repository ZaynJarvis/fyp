// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: collection.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ContentType int32

const (
	ContentType_Any        ContentType = 0
	ContentType_Bytes      ContentType = 1
	ContentType_Text       ContentType = 2
	ContentType_Image_JPEG ContentType = 11
	ContentType_Image_PNG  ContentType = 12
	ContentType_Video      ContentType = 21
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0:  "Any",
		1:  "Bytes",
		2:  "Text",
		11: "Image_JPEG",
		12: "Image_PNG",
		21: "Video",
	}
	ContentType_value = map[string]int32{
		"Any":        0,
		"Bytes":      1,
		"Text":       2,
		"Image_JPEG": 11,
		"Image_PNG":  12,
		"Video":      21,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_collection_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_collection_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{0}
}

type Rule_Op int32

const (
	Rule_noop Rule_Op = 0
	// check not null
	Rule_exist Rule_Op = 1
	// comparable operations
	Rule_lt Rule_Op = 5
	Rule_eq Rule_Op = 6
	Rule_gt Rule_Op = 7
	// string operations
	Rule_ct Rule_Op = 11
)

// Enum value maps for Rule_Op.
var (
	Rule_Op_name = map[int32]string{
		0:  "noop",
		1:  "exist",
		5:  "lt",
		6:  "eq",
		7:  "gt",
		11: "ct",
	}
	Rule_Op_value = map[string]int32{
		"noop":  0,
		"exist": 1,
		"lt":    5,
		"eq":    6,
		"gt":    7,
		"ct":    11,
	}
)

func (x Rule_Op) Enum() *Rule_Op {
	p := new(Rule_Op)
	*p = x
	return p
}

func (x Rule_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_collection_proto_enumTypes[1].Descriptor()
}

func (Rule_Op) Type() protoreflect.EnumType {
	return &file_collection_proto_enumTypes[1]
}

func (x Rule_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_Op.Descriptor instead.
func (Rule_Op) EnumDescriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{0, 0}
}

type Rule_Conversion int32

const (
	Rule_String Rule_Conversion = 0
	Rule_Int    Rule_Conversion = 1
	Rule_Double Rule_Conversion = 2
	// reserve some for data type conversion
	Rule_Len Rule_Conversion = 11
)

// Enum value maps for Rule_Conversion.
var (
	Rule_Conversion_name = map[int32]string{
		0:  "String",
		1:  "Int",
		2:  "Double",
		11: "Len",
	}
	Rule_Conversion_value = map[string]int32{
		"String": 0,
		"Int":    1,
		"Double": 2,
		"Len":    11,
	}
)

func (x Rule_Conversion) Enum() *Rule_Conversion {
	p := new(Rule_Conversion)
	*p = x
	return p
}

func (x Rule_Conversion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_Conversion) Descriptor() protoreflect.EnumDescriptor {
	return file_collection_proto_enumTypes[2].Descriptor()
}

func (Rule_Conversion) Type() protoreflect.EnumType {
	return &file_collection_proto_enumTypes[2]
}

func (x Rule_Conversion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_Conversion.Descriptor instead.
func (Rule_Conversion) EnumDescriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{0, 1}
}

// A rule engine will execute each rule in order.
// each rule will find the field of the object/json/struct, do the serial conversions then execute op with an operand.
// when rule is accepted (for example x.name > 10 == true) based on a sample rate rule engine will use a random guess
// of whether the sample need to be collected
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      string            `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Conversion []Rule_Conversion `protobuf:"varint,2,rep,packed,name=conversion,proto3,enum=Rule_Conversion" json:"conversion,omitempty"`
	Op         Rule_Op           `protobuf:"varint,3,opt,name=op,proto3,enum=Rule_Op" json:"op,omitempty"`
	Operand    string            `protobuf:"bytes,4,opt,name=operand,proto3" json:"operand,omitempty"`
	// [0,1] sample rate, control the amount of data being collected.
	SampleRate float64 `protobuf:"fixed64,5,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_collection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{0}
}

func (x *Rule) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Rule) GetConversion() []Rule_Conversion {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *Rule) GetOp() Rule_Op {
	if x != nil {
		return x.Op
	}
	return Rule_noop
}

func (x *Rule) GetOperand() string {
	if x != nil {
		return x.Operand
	}
	return ""
}

func (x *Rule) GetSampleRate() float64 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

// Requires hot reload when collection config is received.
// This is a good reason to use service agent, we want collection agent to restart, but not the service itself.
// It's okay to lose some data which should be collected, but it's not okay to influence the service
type CollectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service version can be used to ensure the compatibility
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // reserve 2 - 10 for service header
	// identify service by name, each service will recognize itself with a name.
	// In this way, in a decoupled message queue without topic can still filter out service own configuration.
	// or it can be used to identify the sub-service of a service, for example face recognition service in a monitoring
	// platform.
	Service string `protobuf:"bytes,11,opt,name=service,proto3" json:"service,omitempty"`
	// content type is a constraint that to be used as a hint, not necessary.
	Type []ContentType `protobuf:"varint,12,rep,packed,name=type,proto3,enum=ContentType" json:"type,omitempty"`
	// storage config
	ObjectStoragePath string `protobuf:"bytes,15,opt,name=object_storage_path,json=objectStoragePath,proto3" json:"object_storage_path,omitempty"`
	//
	DocumentStoragePath string `protobuf:"bytes,16,opt,name=document_storage_path,json=documentStoragePath,proto3" json:"document_storage_path,omitempty"`
	// it's totally okay not to use text index, so it can be empty
	TextIndexPath string `protobuf:"bytes,17,opt,name=text_index_path,json=textIndexPath,proto3" json:"text_index_path,omitempty"`
	// can stop collection by deleting all rules or set those sample_rate to be zero.
	Rules []*Rule `protobuf:"bytes,20,rep,name=rules,proto3" json:"rules,omitempty"`
	// can be used for extensions. Use extension's serialization methods.
	Extra []byte `protobuf:"bytes,30,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CollectionConfig) Reset() {
	*x = CollectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionConfig) ProtoMessage() {}

func (x *CollectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_collection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionConfig.ProtoReflect.Descriptor instead.
func (*CollectionConfig) Descriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{1}
}

func (x *CollectionConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CollectionConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *CollectionConfig) GetType() []ContentType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CollectionConfig) GetObjectStoragePath() string {
	if x != nil {
		return x.ObjectStoragePath
	}
	return ""
}

func (x *CollectionConfig) GetDocumentStoragePath() string {
	if x != nil {
		return x.DocumentStoragePath
	}
	return ""
}

func (x *CollectionConfig) GetTextIndexPath() string {
	if x != nil {
		return x.TextIndexPath
	}
	return ""
}

func (x *CollectionConfig) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CollectionConfig) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CloudInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cloud server id, service agent can choose to ignore
	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CloudInfo) Reset() {
	*x = CloudInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudInfo) ProtoMessage() {}

func (x *CloudInfo) ProtoReflect() protoreflect.Message {
	mi := &file_collection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudInfo.ProtoReflect.Descriptor instead.
func (*CloudInfo) Descriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{2}
}

func (x *CloudInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AgentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AgentInfo) Reset() {
	*x = AgentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInfo) ProtoMessage() {}

func (x *AgentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_collection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInfo.ProtoReflect.Descriptor instead.
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{3}
}

func (x *AgentInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AgentInfo) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *AgentInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_collection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{4}
}

func (x *Result) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CollectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ContentType `protobuf:"varint,1,opt,name=type,proto3,enum=ContentType" json:"type,omitempty"`
	Url     string      `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Message string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Extra   []byte      `protobuf:"bytes,11,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CollectionEvent) Reset() {
	*x = CollectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionEvent) ProtoMessage() {}

func (x *CollectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_collection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionEvent.ProtoReflect.Descriptor instead.
func (*CollectionEvent) Descriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{5}
}

func (x *CollectionEvent) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentType_Any
}

func (x *CollectionEvent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CollectionEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CollectionEvent) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_collection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{6}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type ImageReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type   ContentType `protobuf:"varint,2,opt,name=type,proto3,enum=ContentType" json:"type,omitempty"`
	Img    []byte      `protobuf:"bytes,6,opt,name=img,proto3" json:"img,omitempty"`
	Result []byte      `protobuf:"bytes,11,opt,name=result,proto3" json:"result,omitempty"`
	Tags   []*Tag      `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ImageReport) Reset() {
	*x = ImageReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageReport) ProtoMessage() {}

func (x *ImageReport) ProtoReflect() protoreflect.Message {
	mi := &file_collection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageReport.ProtoReflect.Descriptor instead.
func (*ImageReport) Descriptor() ([]byte, []int) {
	return file_collection_proto_rawDescGZIP(), []int{7}
}

func (x *ImageReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImageReport) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentType_Any
}

func (x *ImageReport) GetImg() []byte {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *ImageReport) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ImageReport) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_collection_proto protoreflect.FileDescriptor

var file_collection_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x96, 0x02, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x08, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x39, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x08,
	0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x6c, 0x74, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x65,
	0x71, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x67, 0x74, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x63,
	0x74, 0x10, 0x0b, 0x22, 0x36, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x65, 0x6e, 0x10, 0x0b, 0x22, 0xa7, 0x02, 0x0a, 0x10,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x2d, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x4f, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a,
	0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0x29, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22,
	0x83, 0x01, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x69, 0x6d, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x2a, 0x55, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x4a, 0x50, 0x45, 0x47,
	0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x50, 0x4e, 0x47, 0x10,
	0x0c, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x15, 0x32, 0x90, 0x01, 0x0a,
	0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x11, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x0a, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x32,
	0xa6, 0x01, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x0a, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x11, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x0a, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x11, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28, 0x01, 0x32, 0x2b, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x28, 0x01, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x61, 0x79, 0x6e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2f, 0x66,
	0x79, 0x70, 0x2f, 0x64, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_collection_proto_rawDescOnce sync.Once
	file_collection_proto_rawDescData = file_collection_proto_rawDesc
)

func file_collection_proto_rawDescGZIP() []byte {
	file_collection_proto_rawDescOnce.Do(func() {
		file_collection_proto_rawDescData = protoimpl.X.CompressGZIP(file_collection_proto_rawDescData)
	})
	return file_collection_proto_rawDescData
}

var file_collection_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_collection_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_collection_proto_goTypes = []interface{}{
	(ContentType)(0),         // 0: ContentType
	(Rule_Op)(0),             // 1: Rule.Op
	(Rule_Conversion)(0),     // 2: Rule.Conversion
	(*Rule)(nil),             // 3: Rule
	(*CollectionConfig)(nil), // 4: CollectionConfig
	(*CloudInfo)(nil),        // 5: CloudInfo
	(*AgentInfo)(nil),        // 6: AgentInfo
	(*Result)(nil),           // 7: Result
	(*CollectionEvent)(nil),  // 8: CollectionEvent
	(*Tag)(nil),              // 9: Tag
	(*ImageReport)(nil),      // 10: ImageReport
}
var file_collection_proto_depIdxs = []int32{
	2,  // 0: Rule.conversion:type_name -> Rule.Conversion
	1,  // 1: Rule.op:type_name -> Rule.Op
	0,  // 2: CollectionConfig.type:type_name -> ContentType
	3,  // 3: CollectionConfig.rules:type_name -> Rule
	0,  // 4: CollectionEvent.type:type_name -> ContentType
	0,  // 5: ImageReport.type:type_name -> ContentType
	9,  // 6: ImageReport.tags:type_name -> Tag
	4,  // 7: CloudPullService.SendConfig:input_type -> CollectionConfig
	5,  // 8: CloudPullService.HealthCheck:input_type -> CloudInfo
	5,  // 9: CloudPullService.Listen:input_type -> CloudInfo
	6,  // 10: AgentPushService.ListenConfig:input_type -> AgentInfo
	6,  // 11: AgentPushService.GetConfig:input_type -> AgentInfo
	8,  // 12: AgentPushService.SendNotification:input_type -> CollectionEvent
	10, // 13: Local.Image:input_type -> ImageReport
	7,  // 14: CloudPullService.SendConfig:output_type -> Result
	7,  // 15: CloudPullService.HealthCheck:output_type -> Result
	8,  // 16: CloudPullService.Listen:output_type -> CollectionEvent
	4,  // 17: AgentPushService.ListenConfig:output_type -> CollectionConfig
	4,  // 18: AgentPushService.GetConfig:output_type -> CollectionConfig
	7,  // 19: AgentPushService.SendNotification:output_type -> Result
	7,  // 20: Local.Image:output_type -> Result
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_collection_proto_init() }
func file_collection_proto_init() {
	if File_collection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_collection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_collection_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_collection_proto_goTypes,
		DependencyIndexes: file_collection_proto_depIdxs,
		EnumInfos:         file_collection_proto_enumTypes,
		MessageInfos:      file_collection_proto_msgTypes,
	}.Build()
	File_collection_proto = out.File
	file_collection_proto_rawDesc = nil
	file_collection_proto_goTypes = nil
	file_collection_proto_depIdxs = nil
}
