// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudPullServiceClient is the client API for CloudPullService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudPullServiceClient interface {
	SendConfig(ctx context.Context, in *CollectionConfig, opts ...grpc.CallOption) (*Result, error)
	HealthCheck(ctx context.Context, in *CloudInfo, opts ...grpc.CallOption) (*Result, error)
	Listen(ctx context.Context, in *CloudInfo, opts ...grpc.CallOption) (CloudPullService_ListenClient, error)
}

type cloudPullServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudPullServiceClient(cc grpc.ClientConnInterface) CloudPullServiceClient {
	return &cloudPullServiceClient{cc}
}

func (c *cloudPullServiceClient) SendConfig(ctx context.Context, in *CollectionConfig, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/CloudPullService/SendConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudPullServiceClient) HealthCheck(ctx context.Context, in *CloudInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/CloudPullService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudPullServiceClient) Listen(ctx context.Context, in *CloudInfo, opts ...grpc.CallOption) (CloudPullService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudPullService_ServiceDesc.Streams[0], "/CloudPullService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudPullServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudPullService_ListenClient interface {
	Recv() (*CollectionEvent, error)
	grpc.ClientStream
}

type cloudPullServiceListenClient struct {
	grpc.ClientStream
}

func (x *cloudPullServiceListenClient) Recv() (*CollectionEvent, error) {
	m := new(CollectionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudPullServiceServer is the server API for CloudPullService service.
// All implementations must embed UnimplementedCloudPullServiceServer
// for forward compatibility
type CloudPullServiceServer interface {
	SendConfig(context.Context, *CollectionConfig) (*Result, error)
	HealthCheck(context.Context, *CloudInfo) (*Result, error)
	Listen(*CloudInfo, CloudPullService_ListenServer) error
	mustEmbedUnimplementedCloudPullServiceServer()
}

// UnimplementedCloudPullServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudPullServiceServer struct {
}

func (UnimplementedCloudPullServiceServer) SendConfig(context.Context, *CollectionConfig) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConfig not implemented")
}
func (UnimplementedCloudPullServiceServer) HealthCheck(context.Context, *CloudInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedCloudPullServiceServer) Listen(*CloudInfo, CloudPullService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedCloudPullServiceServer) mustEmbedUnimplementedCloudPullServiceServer() {}

// UnsafeCloudPullServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudPullServiceServer will
// result in compilation errors.
type UnsafeCloudPullServiceServer interface {
	mustEmbedUnimplementedCloudPullServiceServer()
}

func RegisterCloudPullServiceServer(s grpc.ServiceRegistrar, srv CloudPullServiceServer) {
	s.RegisterService(&CloudPullService_ServiceDesc, srv)
}

func _CloudPullService_SendConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPullServiceServer).SendConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudPullService/SendConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPullServiceServer).SendConfig(ctx, req.(*CollectionConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudPullService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPullServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudPullService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPullServiceServer).HealthCheck(ctx, req.(*CloudInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudPullService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudPullServiceServer).Listen(m, &cloudPullServiceListenServer{stream})
}

type CloudPullService_ListenServer interface {
	Send(*CollectionEvent) error
	grpc.ServerStream
}

type cloudPullServiceListenServer struct {
	grpc.ServerStream
}

func (x *cloudPullServiceListenServer) Send(m *CollectionEvent) error {
	return x.ServerStream.SendMsg(m)
}

// CloudPullService_ServiceDesc is the grpc.ServiceDesc for CloudPullService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudPullService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CloudPullService",
	HandlerType: (*CloudPullServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendConfig",
			Handler:    _CloudPullService_SendConfig_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _CloudPullService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _CloudPullService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// AgentPushServiceClient is the client API for AgentPushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentPushServiceClient interface {
	ListenConfig(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (AgentPushService_ListenConfigClient, error)
	GetConfig(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*CollectionConfig, error)
	SendNotification(ctx context.Context, opts ...grpc.CallOption) (AgentPushService_SendNotificationClient, error)
}

type agentPushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentPushServiceClient(cc grpc.ClientConnInterface) AgentPushServiceClient {
	return &agentPushServiceClient{cc}
}

func (c *agentPushServiceClient) ListenConfig(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (AgentPushService_ListenConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentPushService_ServiceDesc.Streams[0], "/AgentPushService/ListenConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentPushServiceListenConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentPushService_ListenConfigClient interface {
	Recv() (*CollectionConfig, error)
	grpc.ClientStream
}

type agentPushServiceListenConfigClient struct {
	grpc.ClientStream
}

func (x *agentPushServiceListenConfigClient) Recv() (*CollectionConfig, error) {
	m := new(CollectionConfig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentPushServiceClient) GetConfig(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*CollectionConfig, error) {
	out := new(CollectionConfig)
	err := c.cc.Invoke(ctx, "/AgentPushService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPushServiceClient) SendNotification(ctx context.Context, opts ...grpc.CallOption) (AgentPushService_SendNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentPushService_ServiceDesc.Streams[1], "/AgentPushService/SendNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentPushServiceSendNotificationClient{stream}
	return x, nil
}

type AgentPushService_SendNotificationClient interface {
	Send(*CollectionEvent) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type agentPushServiceSendNotificationClient struct {
	grpc.ClientStream
}

func (x *agentPushServiceSendNotificationClient) Send(m *CollectionEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentPushServiceSendNotificationClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentPushServiceServer is the server API for AgentPushService service.
// All implementations must embed UnimplementedAgentPushServiceServer
// for forward compatibility
type AgentPushServiceServer interface {
	ListenConfig(*AgentInfo, AgentPushService_ListenConfigServer) error
	GetConfig(context.Context, *AgentInfo) (*CollectionConfig, error)
	SendNotification(AgentPushService_SendNotificationServer) error
	mustEmbedUnimplementedAgentPushServiceServer()
}

// UnimplementedAgentPushServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentPushServiceServer struct {
}

func (UnimplementedAgentPushServiceServer) ListenConfig(*AgentInfo, AgentPushService_ListenConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenConfig not implemented")
}
func (UnimplementedAgentPushServiceServer) GetConfig(context.Context, *AgentInfo) (*CollectionConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedAgentPushServiceServer) SendNotification(AgentPushService_SendNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedAgentPushServiceServer) mustEmbedUnimplementedAgentPushServiceServer() {}

// UnsafeAgentPushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentPushServiceServer will
// result in compilation errors.
type UnsafeAgentPushServiceServer interface {
	mustEmbedUnimplementedAgentPushServiceServer()
}

func RegisterAgentPushServiceServer(s grpc.ServiceRegistrar, srv AgentPushServiceServer) {
	s.RegisterService(&AgentPushService_ServiceDesc, srv)
}

func _AgentPushService_ListenConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentPushServiceServer).ListenConfig(m, &agentPushServiceListenConfigServer{stream})
}

type AgentPushService_ListenConfigServer interface {
	Send(*CollectionConfig) error
	grpc.ServerStream
}

type agentPushServiceListenConfigServer struct {
	grpc.ServerStream
}

func (x *agentPushServiceListenConfigServer) Send(m *CollectionConfig) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentPushService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPushServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentPushService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPushServiceServer).GetConfig(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPushService_SendNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentPushServiceServer).SendNotification(&agentPushServiceSendNotificationServer{stream})
}

type AgentPushService_SendNotificationServer interface {
	SendAndClose(*Result) error
	Recv() (*CollectionEvent, error)
	grpc.ServerStream
}

type agentPushServiceSendNotificationServer struct {
	grpc.ServerStream
}

func (x *agentPushServiceSendNotificationServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentPushServiceSendNotificationServer) Recv() (*CollectionEvent, error) {
	m := new(CollectionEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentPushService_ServiceDesc is the grpc.ServiceDesc for AgentPushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentPushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AgentPushService",
	HandlerType: (*AgentPushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _AgentPushService_GetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenConfig",
			Handler:       _AgentPushService_ListenConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendNotification",
			Handler:       _AgentPushService_SendNotification_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "config.proto",
}
